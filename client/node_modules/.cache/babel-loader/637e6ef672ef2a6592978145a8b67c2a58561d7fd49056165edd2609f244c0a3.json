{"ast":null,"code":"var _s = $RefreshSig$();\n// File: client/src/App.tsx\nimport { useState } from \"react\";\nimport \"./App.css\";\nfunction App() {\n  _s();\n  const [city, setCity] = useState(\"\");\n  const [result, setResult] = useState({\n    energy_mix: {\n      solar: 58,\n      wind: 22,\n      battery: 15,\n      grid: 5\n    },\n    co2_reduction: 1.3,\n    savings_per_month: 16,\n    geji_score: 0.75\n  });\n  const [brief, setBrief] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const handleSubmit = async () => {\n    setLoading(true);\n    try {\n      // Step 1: Get simulation result from FastAPI\n      const simResponse = await fetch(\"http://127.0.0.1:8000/simulate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          city\n        })\n      });\n      const simData = await simResponse.json();\n      setResult(simData);\n\n      // Step 2: Use the result to generate the Gemini brief\n      const briefResponse = await fetch(\"http://127.0.0.1:8000/generate-brief\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          city,\n          result: simData\n        })\n      });\n      const briefData = await briefResponse.json();\n      setBrief(briefData.brief);\n    } catch (error) {\n      console.error(\"Failed to simulate or fetch brief:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n}\n_s(App, \"vpqvda+OwTpYF+hdGwWFOh3zic4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","_s","city","setCity","result","setResult","energy_mix","solar","wind","battery","grid","co2_reduction","savings_per_month","geji_score","brief","setBrief","loading","setLoading","handleSubmit","simResponse","fetch","method","headers","body","JSON","stringify","simData","json","briefResponse","briefData","error","console","_c","$RefreshReg$"],"sources":["D:/FRLNCE/000000 Dev Hackathons/Google/02 Agent Development Kit 24 June/Green/greenify-my-city/client/src/App.tsx"],"sourcesContent":["// File: client/src/App.tsx\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport ReactMarkdown from \"react-markdown\";\nimport EnergyChart from \"./EnergyChart\";\nimport CityAutocomplete from \"./CityAutocomplete\";\n\n\nfunction App() {\n  const [city, setCity] = useState(\"\");\n  const [result, setResult] = useState({\n    energy_mix: { solar: 58, wind: 22, battery: 15, grid: 5 },\n    co2_reduction: 1.3,\n    savings_per_month: 16,\n    geji_score: 0.75,\n  });\n\n  const [brief, setBrief] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    try {\n      // Step 1: Get simulation result from FastAPI\n      const simResponse = await fetch(\"http://127.0.0.1:8000/simulate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ city }),\n      });\n      const simData = await simResponse.json();\n      setResult(simData);\n\n      // Step 2: Use the result to generate the Gemini brief\n      const briefResponse = await fetch(\"http://127.0.0.1:8000/generate-brief\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ city, result: simData }),\n      });\n      const briefData = await briefResponse.json();\n      setBrief(briefData.brief);\n    } catch (error) {\n      console.error(\"Failed to simulate or fetch brief:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\nexport default App;"],"mappings":";AAAA;AACA,SAAgBA,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAMlB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC;IACnCO,UAAU,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,IAAI,EAAE,EAAE;MAAEC,OAAO,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAC;IACzDC,aAAa,EAAE,GAAG;IAClBC,iBAAiB,EAAE,EAAE;IACrBC,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMmB,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BD,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF;MACA,MAAME,WAAW,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;QAChEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEvB;QAAK,CAAC;MAC/B,CAAC,CAAC;MACF,MAAMwB,OAAO,GAAG,MAAMP,WAAW,CAACQ,IAAI,CAAC,CAAC;MACxCtB,SAAS,CAACqB,OAAO,CAAC;;MAElB;MACA,MAAME,aAAa,GAAG,MAAMR,KAAK,CAAC,sCAAsC,EAAE;QACxEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEvB,IAAI;UAAEE,MAAM,EAAEsB;QAAQ,CAAC;MAChD,CAAC,CAAC;MACF,MAAMG,SAAS,GAAG,MAAMD,aAAa,CAACD,IAAI,CAAC,CAAC;MAC5CZ,QAAQ,CAACc,SAAS,CAACf,KAAK,CAAC;IAC3B,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D,CAAC,SAAS;MACRb,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;AAgBH;AAAChB,EAAA,CAzDQD,GAAG;AAAAgC,EAAA,GAAHhC,GAAG;AA2DZ,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}